{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "bdac3adf"
		},
		"AzureDatabricks_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks'"
		},
		"MySql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MySql'"
		},
		"Prueba_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Prueba'"
		},
		"AzureDatabricks_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0130-142130-e572svn2"
		},
		"FromStgToRawTrigger_properties_MoveFromStgToRaw_parameters_origin": {
			"type": "string",
			"defaultValue": "stg"
		},
		"FromStgToRawTrigger_properties_MoveFromStgToRaw_parameters_destination": {
			"type": "string",
			"defaultValue": "raw"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-8876905855923813.13.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks_accessToken')]"
					},
					"existingClusterId": "[parameters('AzureDatabricks_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('MySql_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Prueba')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Prueba_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatabricksTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NotebookTest",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/1804760@alu365.murciaeduca.es/Test"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Prueba",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "String"
					},
					"binary": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().binary",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Prueba')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryMetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Prueba",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Prueba')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataDestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Prueba",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"destination": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "books",
						"container": {
							"value": "@dataset().destination",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Prueba')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataOrigin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Prueba",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"origin": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().origin",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Prueba')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MySql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MySql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Prueba",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"output": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().output",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Prueba')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoveFromBlobToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromBlobToBlob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.input",
										"type": "Expression"
									},
									"binary": {
										"value": "@pipeline().parameters.binary",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.output",
										"type": "Expression"
									},
									"binary": {
										"value": "@pipeline().parameters.binary",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteBlobInput",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyFromBlobToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.input",
										"type": "Expression"
									},
									"binary": {
										"value": "@pipeline().parameters.binary",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "Prueba",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"input": {
						"type": "string"
					},
					"output": {
						"type": "string"
					},
					"binary": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary')]",
				"[concat(variables('factoryId'), '/linkedServices/Prueba')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoveFromMysqlToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromMysqlToBlob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MySql",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Table",
								"type": "DatasetReference",
								"parameters": {
									"output": {
										"value": "@pipeline().parameters.output",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"output": {
						"type": "string"
					}
				},
				"variables": {
					"flag": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MySql')]",
				"[concat(variables('factoryId'), '/datasets/Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoveFromStgToRaw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetFechaActual",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "current_date",
							"value": {
								"value": "@formatDateTime(utcnow(),'yyyyMMdd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "TryFindFlag",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetFechaActual",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FlagExists'),true)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CheckFlag",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DataOrigin",
											"type": "DatasetReference",
											"parameters": {
												"origin": {
													"value": "@pipeline().parameters.origin",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "FilterFlag",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "CheckFlag",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('CheckFlag').output.childItems",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().name,concat(variables('current_date'),'.flg'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "FlagExists",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "FilterFlag",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FlagExists",
										"value": {
											"value": "@greaterOrEquals(activity('FilterFlag').output.FilteredItemsCount,1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForFlag",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "FlagExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('FlagExists'),true)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 60
												}
											}
										]
									}
								}
							],
							"timeout": "0.0:10:00"
						}
					},
					{
						"name": "FlagExits",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "TryFindFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FlagExists'),true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyStgToRaw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@variables('current_date')",
													"type": "Expression"
												},
												"wildcardFileName": "*.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataOrigin",
											"type": "DatasetReference",
											"parameters": {
												"origin": {
													"value": "@pipeline().parameters.origin",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataDestination",
											"type": "DatasetReference",
											"parameters": {
												"destination": {
													"value": "@pipeline().parameters.destination",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteStgFlg",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyStgToRaw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DataOrigin",
											"type": "DatasetReference",
											"parameters": {
												"origin": {
													"value": "@pipeline().parameters.origin",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@concat(variables('current_date'),'.flg')",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "DeleteStgBooks",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyStgToRaw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DataOrigin",
											"type": "DatasetReference",
											"parameters": {
												"origin": {
													"value": "@concat(pipeline().parameters.origin,'/',variables('current_date'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"origin": {
						"type": "string",
						"defaultValue": "stg"
					},
					"destination": {
						"type": "string",
						"defaultValue": "raw"
					}
				},
				"variables": {
					"fichero": {
						"type": "String"
					},
					"current_date": {
						"type": "String"
					},
					"FlagExists": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataOrigin')]",
				"[concat(variables('factoryId'), '/datasets/DataDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FromStgToRawTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "MoveFromStgToRaw",
							"type": "PipelineReference"
						},
						"parameters": {
							"origin": "[parameters('FromStgToRawTrigger_properties_MoveFromStgToRaw_parameters_origin')]",
							"destination": "[parameters('FromStgToRawTrigger_properties_MoveFromStgToRaw_parameters_destination')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2024-03-05T10:30:00",
						"timeZone": "Romance Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MoveFromStgToRaw')]"
			]
		}
	]
}